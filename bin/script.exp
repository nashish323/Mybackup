#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Mon Sep 22 01:08:45 2014
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn $env(SHELL)
match_max 100000
expect -exact "jenkins@pxe-jenkins:~/files\$ "
send -- "cd /var/lib/jenkins/workspace/Reader-SDK/"
expect -exact "cd /var/lib/jenkins/workspace/Reader-SDK/"
send -- "\r"
expect -exact "\r
jenkins@pxe-jenkins:~/workspace/Reader-SDK\$ "
send -- "rm -rf s"
expect -exact " s"
send -- "dk.g"
expect -exact ".g"
send -- "it "
expect -exact "\[K"
send -- "/ pxereaderjs/\r"
expect -exact "/ pxereaderjs/\r
jenkins@pxe-jenkins:~/workspace/Reader-SDK\$ "
send -- "git clone https://devops-tools.pearson.com/stash/scm/psw/sdk.git --depth 1 --bare"
expect -exact "git clone https://devops-tools.pearson.com/stash/scm/psw/sdk.git --depth 1 --bare"
send -- "\r"
expect -exact "\r
Cloning into bare repository 'sdk.git'...\r
Username for 'https://devops-tools.pearson.com': "
send -- "VPARAAP"
expect -exact "VPARAAP"
send -- "\r"
expect -exact "\r
Password for 'https://VPARAAP@devops-tools.pearson.com': "
send -- "June2014@692\r"
expect -exact "\r
jenkins@pxe-jenkins:~/workspace/Reader-SDK\$ "
send -- "cd sdk.git\r"
expect -exact "cd sdk.git\r
jenkins@pxe-jenkins:~/workspace/Reader-SDK/sdk.git\$ "
send -- "git --work-tree=../ checkout HEAD -- /pxereaderjs"
expect -exact "git --work-tree=../ checkout HEAD -- /pxereaderjs"
send -- "\r"
expect -exact "\r
jenkins@pxe-jenkins:~/workspace/Reader-SDK/sdk.git\$ "
send -- "\r"
expect -exact "\r
jenkins@pxe-jenkins:~/workspace/Reader-SDK/sdk.git\$ "
send -- "cd\r"
expect -exact "cd\r
jenkins@pxe-jenkins:~\$ "
send -- ""
expect eof
